(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{524:function(n,t,r){"use strict";r.r(t);var e=r(6),s=Object(e.a)({},(function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("p",[r("strong",[n._v("什么是单一职责原则")]),r("br"),n._v("\n  单一职责原则（SRP：Single responsibility principle）又称单一功能原则，面向对象五个基本原则（SOLID）之一。它规定一个类应该只有一个发生变化的原因。"),r("br"),n._v("\n  所谓职责是指类变化的原因。如果一个类有多于一个的动机被改变，那么这个类就具有多于一个的职责。而单一职责原则就是指一个类或者模块应该有且只有一个改变的原因。")]),n._v(" "),r("p",[r("strong",[n._v("为什么要使用单一职责原则")]),r("br"),n._v("\n  如果一个类承担的职责过多，就等于把这些职责耦合在一起了。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。而如果想要避免这种现象的发生，就要尽可能的遵守单一职责原则。此原则的核心就是解耦和增强内聚性。"),r("br"),n._v("\n  就好比，现在的手机，拥有各种各样的功能，拍照，打电话，发短信，玩游戏，导航。但是每一个功能又都不是那么强大，远远比不上专业的。拍照比不上专业单反，玩游戏比不上电脑或专业游戏机，导航比不上专业导航设备等等，这就是因为手机的职责太多了。"),r("br"),n._v("\n  一个类，只有一个引起它变化的原因。应该只有一个职责。每一个职责都是变化的一个轴线，如果一个类有一个以上的职责，这些职责就耦合在了一起。这会导致脆弱的设计。当一个职责发生变化时，可能会影响其它的职责。另外，多个职责耦合在一起，会影响复用性。例如：要实现逻辑和界面的分离。")]),n._v(" "),r("p",[r("strong",[n._v("未完待续。。。")])])])}),[],!1,null,null,null);t.default=s.exports}}]);