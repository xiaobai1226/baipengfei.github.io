(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{532:function(e,t,o){"use strict";o.r(t);var n=o(6),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。")]),e._v(" "),o("p",[e._v('$ git commit -m "hello world"\n上面代码的-m参数，就是用来指定 commit mesage 的。')]),e._v(" "),o("p",[e._v("如果一行不够，可以只执行git commit，就会跳出文本编辑器，让你写多行。")]),e._v(" "),o("p",[e._v("$ git commit\n基本上，你写什么都行（这里，这里和这里）。")]),e._v(" "),o("p",[e._v("但是，一般来说，commit message 应该清晰明了，说明本次提交的目的。")]),e._v(" "),o("p",[e._v("目前，社区有多种 Commit message 的写法规范。本文介绍Angular 规范（见上图），这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。")]),e._v(" "),o("p",[e._v("一、Commit message 的作用\n格式化的Commit message，有几个好处。")]),e._v(" "),o("p",[e._v("（1）提供更多的历史信息，方便快速浏览。")]),e._v(" "),o("p",[e._v("比如，下面的命令显示上次发布后的变动，每个commit占据一行。你只看行首，就知道某次 commit 的目的。")]),e._v(" "),o("p",[e._v("$ git log "),o("last",{attrs:{tag:""}},[e._v(" HEAD --pretty=format:%s")])],1),e._v(" "),o("p",[e._v("（2）可以过滤某些commit（比如文档改动），便于快速查找信息。")]),e._v(" "),o("p",[e._v("比如，下面的命令仅仅显示本次发布新增加的功能。")]),e._v(" "),o("p",[e._v("$ git log "),o("last",{attrs:{release:""}},[e._v(" HEAD --grep feature\n（3）可以直接从commit生成Change log。")])],1),e._v(" "),o("p",[e._v("Change Log 是发布新版本时，用来说明与上一个版本差异的文档，详见后文。")]),e._v(" "),o("p",[e._v("二、Commit message 的格式\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。")]),e._v(" "),o("p",[o("type",[e._v("("),o("scope",[e._v("): "),o("subject",[e._v("\n// 空一行\n"),o("body",[e._v("\n// 空一行\n"),o("footer",[e._v("\n其中，Header 是必需的，Body 和 Footer 可以省略。")])])])],1)],1)],1),e._v(" "),o("p",[e._v("不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。")]),e._v(" "),o("p",[e._v("2.1 Header\nHeader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。")]),e._v(" "),o("p",[e._v("（1）type")]),e._v(" "),o("p",[e._v("type用于说明 commit 的类别，只允许使用下面7个标识。")]),e._v(" "),o("p",[e._v("feat：新功能（feature）\nfix：修补bug\ndocs：文档（documentation）\nstyle： 格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。")]),e._v(" "),o("p",[e._v("（2）scope")]),e._v(" "),o("p",[e._v("scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。")]),e._v(" "),o("p",[e._v("（3）subject")]),e._v(" "),o("p",[e._v("subject是 commit 目的的简短描述，不超过50个字符。")]),e._v(" "),o("p",[e._v("以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n第一个字母小写\n结尾不加句号（.）\n2.2 Body\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。")]),e._v(" "),o("p",[e._v("More detailed explanatory text, if necessary.  Wrap it to\nabout 72 characters or so.")]),e._v(" "),o("p",[e._v("Further paragraphs come after blank lines.")]),e._v(" "),o("ul",[o("li",[e._v("Bullet points are okay, too")]),e._v(" "),o("li",[e._v("Use a hanging indent\n有两个注意点。")])]),e._v(" "),o("p",[e._v("（1）使用第一人称现在时，比如使用change而不是changed或changes。")]),e._v(" "),o("p",[e._v("（2）应该说明代码变动的动机，以及与以前行为的对比。")]),e._v(" "),o("p",[e._v("2.3 Footer\nFooter 部分只用于两种情况。")]),e._v(" "),o("p",[e._v("（1）不兼容变动")]),e._v(" "),o("p",[e._v("如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。")]),e._v(" "),o("p",[e._v("BREAKING CHANGE: isolate scope bindings definition has changed.")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[e._v("To migrate the code follow the example below:\n\nBefore:\n\nscope: {\n  myAttr: 'attribute',\n}\n\nAfter:\n\nscope: {\n  myAttr: '@',\n}\n\nThe removed `inject` wasn't generaly useful for directives so there should be no code using it.\n")])])]),o("p",[e._v("（2）关闭 Issue")]),e._v(" "),o("p",[e._v("如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。")]),e._v(" "),o("p",[e._v("Closes #234\n也可以一次关闭多个 issue 。")]),e._v(" "),o("p",[e._v("Closes #123, #245, #992\n2.4 Revert\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。")]),e._v(" "),o("p",[e._v("revert: feat(pencil): add 'graphiteWidth' option")]),e._v(" "),o("p",[e._v("This reverts commit 667ecc1654a317a13331b17617d973392f415f02.\nBody部分的格式是固定的，必须写成This reverts commit <hash>.，其中的hash是被撤销 commit 的 SHA 标识符。")]),e._v(" "),o("p",[e._v("如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。")]),e._v(" "),o("p",[e._v("三、Commitizen\nCommitizen是一个撰写合格 Commit message 的工具。")]),e._v(" "),o("p",[e._v("安装命令如下。")]),e._v(" "),o("p",[e._v("$ npm install -g commitizen\n然后，在项目目录里，运行下面的命令，使其支持 Angular 的 Commit message 格式。")]),e._v(" "),o("p",[e._v("$ commitizen init cz-conventional-changelog --save --save-exact\n以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。")]),e._v(" "),o("p",[e._v("四、validate-commit-msg\nvalidate-commit-msg 用于检查 Node 项目的 Commit message 是否符合格式。")]),e._v(" "),o("p",[e._v("它的安装是手动的。首先，拷贝下面这个JS文件，放入你的代码库。文件名可以取为validate-commit-msg.js。")]),e._v(" "),o("p",[e._v("接着，把这个脚本加入 Git 的 hook。下面是在package.json里面使用 ghooks，把这个脚本加为commit-msg时运行。")]),e._v(" "),o("p",[e._v('"config": {\n"ghooks": {\n"commit-msg": "./validate-commit-msg.js"\n}\n}\n然后，每次git commit的时候，这个脚本就会自动检查 Commit message 是否合格。如果不合格，就会报错。')]),e._v(" "),o("p",[e._v('$ git add -A\n$ git commit -m "edit markdown"\nINVALID COMMIT MSG: does not match "'),o("type",[e._v("("),o("scope",[e._v("): "),o("subject",[e._v('" ! was: edit markdown\n五、生成 Change log\n如果你的所有 Commit 都符合 Angular 格式，那么发布新版本时， Change log 就可以用脚本自动生成（例1，例2，例3）。')])],1)],1)],1),e._v(" "),o("p",[e._v("生成的文档包括以下三个部分。")]),e._v(" "),o("p",[e._v("New features\nBug fixes\nBreaking changes.\n每个部分都会罗列相关的 commit ，并且有指向这些 commit 的链接。当然，生成的文档允许手动修改，所以发布前，你还可以添加其他内容。")]),e._v(" "),o("p",[e._v("conventional-changelog 就是生成 Change log 的工具，运行下面的命令即可。")]),e._v(" "),o("p",[e._v("$ npm install -g conventional-changelog\n$ cd my-project\n$ conventional-changelog -p angular -i CHANGELOG.md -w\n上面命令不会覆盖以前的 Change log，只会在CHANGELOG.md的头部加上自从上次发布以来的变动。")]),e._v(" "),o("p",[e._v("如果你想生成所有发布的 Change log，要改为运行下面的命令。")]),e._v(" "),o("p",[e._v("$ conventional-changelog -p angular -i CHANGELOG.md -w -r 0\n为了方便使用，可以将其写入package.json的scripts字段。")]),e._v(" "),o("p",[e._v('{\n"scripts": {\n"changelog": "conventional-changelog -p angular -i CHANGELOG.md -w -r 0"\n}\n}\n以后，直接运行下面的命令即可。')]),e._v(" "),o("p",[e._v("$ npm run changelog")]),e._v(" "),o("h2",{attrs:{id:"参考"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),o("p",[o("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html"),o("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);